# main.py
import pygame
from settings import *
from sprites import *
import os

class Game:
    def __init__(self):
        # Инициализация
        pygame.init()
        pygame.mixer.init() # для звука
        self.screen = pygame.display.set_mode((WIDTH, HEIGHT))
        pygame.display.set_caption(TITLE)
        self.clock = pygame.time.Clock()
        self.running = True

    def new(self):
        # Начало новой игры
        self.all_sprites = pygame.sprite.Group()
        self.platforms = pygame.sprite.Group()
        self.enemies = pygame.sprite.Group()

        # Создание уровня из карты
        for row_idx, row in enumerate(LEVEL_1_MAP):
            for col_idx, tile in enumerate(row):
                if tile == 'P':
                    p = Platform(col_idx * TILE_SIZE, row_idx * TILE_SIZE)
                    self.all_sprites.add(p)
                    self.platforms.add(p)
                if tile == 'G':
                    g = Platform(col_idx * TILE_SIZE, row_idx * TILE_SIZE, is_ground=True)
                    self.all_sprites.add(g)
                    self.platforms.add(g)

        # Создание игрока и врагов
        self.player = Player(self)
        self.all_sprites.add(self.player)
        
        enemy = Enemy(500, HEIGHT - TILE_SIZE * 3) # Пример врага
        self.all_sprites.add(enemy)
        self.enemies.add(enemy)
        
        self.run()

    def run(self):
        # Игровой цикл
        self.playing = True
        while self.playing:
            self.clock.tick(FPS)
            self.events()
            self.update()
            self.draw()

    def update(self):
        # Обновление всех спрайтов
        self.all_sprites.update()

        # Проверка столкновения игрока с платформами по вертикали
        if self.player.vel.y > 0:
            hits = pygame.sprite.spritecollide(self.player, self.platforms, False)
            if hits:
                self.player.pos.y = hits[0].rect.top + 1
                self.player.vel.y = 0
                self.player.on_ground = True

        # Проверка столкновения игрока с платформами по горизонтали
        self.player.rect.centerx = self.player.pos.x
        hits = pygame.sprite.spritecollide(self.player, self.platforms, False)
        if hits:
            if self.player.vel.x > 0: # Движется вправо
                self.player.pos.x = hits[0].rect.left - self.player.rect.width / 2
            if self.player.vel.x < 0: # Движется влево
                self.player.pos.x = hits[0].rect.right + self.player.rect.width / 2
            self.player.vel.x = 0
            self.player.rect.centerx = self.player.pos.x

        # Простая камера, которая следует за игроком
        if self.player.rect.right > WIDTH * 0.75:
            self.player.pos.x -= abs(self.player.vel.x)
            for sprite in self.all_sprites:
                sprite.rect.x -= abs(self.player.vel.x)
        if self.player.rect.left < WIDTH * 0.25:
            self.player.pos.x += abs(self.player.vel.x)
            for sprite in self.all_sprites:
                 sprite.rect.x += abs(self.player.vel.x)


    def events(self):
        # Обработка событий
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                if self.playing:
                    self.playing = False
                self.running = False
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_SPACE or event.key == pygame.K_UP or event.key == pygame.K_w:
                    self.player.jump()

    def draw(self):
        # Отрисовка
        self.screen.fill((135, 206, 235)) # Голубой фон
        self.all_sprites.draw(self.screen)
        pygame.display.flip()

    def show_start_screen(self):
        # Стартовый экран/меню
        self.screen.fill(BLACK)
        # Здесь будет код для отрисовки кнопок "Новая игра", "Выход" и т.д.
        # Для простоты, ждем нажатия любой клавиши для старта
        font = pygame.font.Font(None, 74)
        text = font.render("Нажмите любую клавишу", True, WHITE)
        text_rect = text.get_rect(center=(WIDTH/2, HEIGHT/2))
        self.screen.blit(text, text_rect)
        pygame.display.flip()
        
        waiting = True
        while waiting:
            self.clock.tick(FPS)
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    waiting = False
                    self.running = False
                if event.type == pygame.KEYUP:
                    waiting = False

# Создание и запуск игры
g = Game()
g.show_start_screen()
while g.running:
    g.new()

pygame.quit()
