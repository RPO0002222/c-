#include <iostream>
using namespace std;

// 1 задание
template <typename T>
double average(T arr[], int size) {
    double sum = 0;
    for (int i = 0; i < size; ++i) {
        sum += arr[i];
    }
    return sum / size;
}

int main() {
    int intArr[] = {1, 2, 3, 4, 5};
    cout << "Среднее (int): " << average(intArr, 5) << endl; // 3

    double doubleArr[] = {1.5, 2.5, 3.5};
    cout << "Среднее (double): " << average(doubleArr, 3) << endl; // 2.5
    return 0;
}


// 2 задание
#include <iostream>
#include <cmath>
using namespace std;

// Линейное уравнение
template <typename T>
void solveEquation(T a, T b) {
    if (a == 0) {
        if (b == 0) cout << "Бесконечное число решений" << endl;
        else cout << "Нет решений" << endl;
    } else {
        cout << "x = " << -b / a << endl;
    }
}

// Квадратное уравнение
template <typename T>
void solveEquation(T a, T b, T c) {
    if (a == 0) {
        solveEquation(b, c); 
        return;
    }

    T discriminant = b * b - 4 * a * c;
    if (discriminant > 0) {
        T sqrtD = sqrt(discriminant);
        cout << "x1 = " << (-b + sqrtD) / (2 * a) << endl;
        cout << "x2 = " << (-b - sqrtD) / (2 * a) << endl;
    } else if (discriminant == 0) {
        cout << "x = " << -b / (2 * a) << std::endl;
    } else {
        cout << "Действительных корней нет" << endl;
    }
}

int main() {
    solveEquation(2.0, 4.0);     
    solveEquation(1.0, -5.0, 6.0); 
    return 0;
}

// 3 задание
template <typename T>
T max(T a, T b) {
    return (a > b) ? a : b;
}

int main() {
    cout << "Максимум (5, 3): " << max(5, 3) << endl; 
    cout << "Максимум (2.5, 3.7): " << max(2.5, 3.7) << endl; 
    return 0;
}


// 4 задание
template <typename T>
T min(T a, T b) {
    return (a < b) ? a : b;
}

int main() {
    cout << "Минимум (5, 3): " << min(5, 3) << endl; 
    cout << "Минимум (2.5, 3.7): " << min(2.5, 3.7) << endl; 
    return 0;
}
